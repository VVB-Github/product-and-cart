#----------------------------------------------------------------------------------
Фичи для добавления:
    - улучшить начальную страницу (может сделать больше карточек товара на начальной странице)
    - может, добавить картинки товаров (если есть сами картинки)
    - добавить чего-то на страницу с Products
    - подсоединить fastapi и БД
    - Добавить систему аутентификации

#----------------------------------------------------------------------------------
Команды:
    npm run lint -- --fix - эта команда фиксит проблемы с пробелами, табуляцией и пр 
    npm run serve - запуск проекта на хосте

Что делают конкретные файлы:
    .editorconfig
        это конфигурационный файл для поддержания единых стилей оформления кода в разных редакторах и
        IDE (интегрированных средах разработки) для проектов. Хотя он не является специфичным исключительно для Vue.js,
        его использование в проектах на Vue (как и на любом другом языке программирования или фреймворке) помогает
        обеспечить согласованность стиля кодирования среди различных разработчиков.

        Файл .editorconfig содержит набор правил, которые автоматически применяются поддерживающими редакторами
        при редактировании файлов в проекте. Эти правила могут включать в себя:
            Отступы: использование пробелов или табов для отступов, а также размер отступа (например, 2 или 4 пробела).
            Конец строки: формат символов конца строки, например, LF (для Unix и macOS) или CRLF (для Windows).
            Кодировка файла: например, utf-8.
            Удаление пробелов в конце строки.
            Добавление пустой строки в конце файла.
        В файле .editorconfig, секция [*.{js,jsx,ts,tsx,vue}] 
            задаёт правила форматирования кода, которые будут применяться к файлам с указанными расширениями:
            JavaScript (.js), JSX (.jsx), TypeScript (.ts), TSX (.tsx), и Vue (.vue). Это позволяет настроить
            определённые стилистические и технические аспекты кодирования специально для этих типов файлов.

    Файл babel.config.js 
        в проектах, использующих Babel, служит для конфигурации Babel — популярного инструмента для транспиляции
        JavaScript кода. Транспиляция — это процесс преобразования кода, написанного с использованием новых
        стандартов JavaScript (ES6 и выше), в более старый код (обычно ES5), который может быть выполнен в
        текущих и старых браузерах, не поддерживающих новейшие возможности языка. Это позволяет разработчикам
        использовать новейшие возможности JavaScript, сохраняя при этом совместимость с более широким спектром
        пользовательских агентов.

        В файле babel.config.js могут быть указаны:
            Плагины Babel
                небольшие программы, расширяющие функциональность Babel, позволяющие использовать специфические
                возможности языка или синтаксис, например, поддержку декораторов или JSX.
            Пресеты Babel 
                это наборы плагинов, сгруппированные вместе для достижения общей цели. Примером может служить
                @babel/preset-env, который автоматически определяет, какие возможности JavaScript нужно транспилировать
                и какие полифилы добавить в зависимости от целевых сред выполнения (браузеров или версий Node.js),
                указанных в конфигурации.
            Опции конфигурации
                настройки для тонкой настройки работы Babel, включая указание целевых сред выполнения, настройки для
                плагинов и пресетов, и многое другое.
        
        В файле babel.config.js есть следующий код
            module.exports = {
                presets: [
                    '@vue/cli-plugin-babel/preset'
                ]
            }
            Тут настройка Babel осуществляется через использование пресета @vue/cli-plugin-babel/preset. Это
            конфигурация специфична для проектов, созданных с использованием Vue CLI, инструментария командной
            строки для быстрого развёртывания и настройки новых проектов Vue.js.
            Пресет @vue/cli-plugin-babel/preset включает в себя настройки Babel, оптимизированные для работы с
            Vue.js. Он автоматически настраивает Babel для компиляции JavaScript кода, используемого в проекте Vue,
            с целью обеспечения совместимости с более старыми браузерами и оптимизации производительности. 
    
    Файл jsconfig.js - 
        в проекте на Vue.js (или в любом другом JavaScript-проекте) используется для настройки поведения редактора кода
        и TypeScript компилятора для JavaScript проектов. Несмотря на то что Vue-проекты чаще всего используют файлы
        с расширением .vue, многие из них также содержат значительное количество чистого JavaScript кода. Файл
        jsconfig.json помогает редакторам кода, таким как Visual Studio Code, лучше понимать структуру проекта,
        что позволяет улучшить автодополнение, навигацию по коду, отображение ошибок и предупреждений в реальном
        времени и другие функции интеллектуальной среды разработки (IDE).
        В jsconfig.json можно указать:
            корневой файл проекта, опции компилятора, пути для импорта и другие настройки, которые влияют на
            обработку кода. Этот файл является упрощённой версией tsconfig.json, используемого в TypeScript
            проектах, и предназначен для использования в проектах, где код написан на чистом JavaScript.

    Файл package-lock.json
        играет важную роль в проектах на Vue.js, а также в любых других проектах, использующих Node.js и npm
        (Node Package Manager) для управления зависимостями. Этот файл автоматически генерируется при выполнении
        команд npm, таких как npm install, и служит целям:
            (Основная) Зафиксировать версии зависимостей -
                package-lock.json точно описывает, какие версии всех зависимостей (и зависимостей их зависимостей,
                и так далее) были установлены в момент последнего обновления зависимостей проекта. Это обеспечивает
                согласованность установленных версий пакетов между различными средами разработки, тестирования и
                продакшена, предотвращая "работало у меня" сценарии, когда разные версии пакетов приводят к ошибкам
                в одной среде, но не в другой.

    Файл package.json 
        является ключевым файлом в любом проекте на Node.js, включая проекты на Vue.js, и выполняет несколько
        важных функций:
            Управление Зависимостями
                Одна из основных ролей package.json — определение зависимостей проекта. В разделах dependencies и
                devDependencies перечисляются библиотеки и пакеты, необходимые для работы приложения и разработки
                соответственно, вместе с версиями (или диапазонами версий), которые проект требует. Это позволяет
                npm устанавливать, обновлять и управлять этими зависимостями.
            Скрипты
                В package.json можно определить скрипты под командами scripts, которые упрощают выполнение частых
                задач, таких как сборка проекта, запуск тестов, линтинг кода и т.д., через npm run <script_name>.
                Это упрощает процессы разработки, тестирования и развертывания.
            Метаданные Проекта
                Файл содержит важные метаданные проекта, включая имя проекта (name), версию (version), описание
                (description), автора (author), лицензию (license) и т.д. Эти данные могут быть использованы для
                идентификации проекта, его каталогизации в реестрах и при публикации пакета.
            Конфигурация
                package.json может содержать конфигурации для различных инструментов и библиотек, используемых в
                проекте, например, Babel, ESLint, и других. Это позволяет централизованно управлять настройками
                этих инструментов.
            Репозиторий и Документация
                Файл может указывать на репозиторий проекта (repository), домашнюю страницу (homepage) и документацию
                (bugs), что облегчает доступ к исходному коду, инструкциям и поддержке.
            Публикация Пакета
                Для проектов, предназначенных для публикации в реестре npm, package.json содержит всю необходимую
                информацию для публикации и распространения пакета, включая зависимости, которые должны быть
                установлены вместе с пакетом.
        В сравнении с package-lock.json, который предоставляет точный снимок всех зависимостей для обеспечения их
        согласованности, package.json служит более общим описанием проекта, его зависимостей и конфигураций.
        Оба файла важны для управления проектом, но выполняют различные функции: package.json для описания
        требований проекта и package-lock.json для обеспечения точного воспроизведения этих требований.

    vue.config.js 
        является необязательным конфигурационным файлом в проектах на Vue.js, который используется для настройки
        различных аспектов сборки и разработки проекта. Он предоставляет более глубокий уровень настройки поверх
        стандартных конфигураций, предоставляемых Vue CLI.
        Вот несколько причин и сценариев, почему и когда может потребоваться vue.config.js:
            Настройка Webpack
                Хотя Vue CLI абстрагирует большую часть конфигурации Webpack, vue.config.js позволяет вам дополнительно
                настраивать конфигурацию Webpack, не требуя "извлечения" конфигурации (ejecting), как это происходит
                в некоторых других сборщиках и фреймворках. Это может включать изменение настроек загрузчика (loader),
                добавление новых плагинов или модификацию существующих.
            Переопределение Путей
                Можно использовать vue.config.js для изменения стандартных путей сборки, например, указать другую
                директорию для сборки проекта вместо стандартной dist.
            Настройка Dev Server
                Файл конфигурации позволяет настраивать встроенный сервер разработки, предоставляемый Vue CLI.
                Это может включать изменение порта, настройку прокси для API запросов во избежание проблем с
                CORS во время разработки, включение HTTPS и т.д.
            Оптимизация производительности
                Можно настроить различные аспекты сборки, такие как разделение кода, для улучшения производительности
                загрузки вашего приложения. Это включает в себя настройку Webpack для создания раздельных чанков
                (chunks) для сторонних библиотек, асинхронных компонентов и т.д.
            Интеграция с другими инструментами и плагинами
                vue.config.js облегчает интеграцию с различными инструментами и плагинами, такими как PWA
                (Progressive Web App) плагины, настройки препроцессоров (например, для Sass/SCSS, Less и т.д.),
                или настройки для транспиляции кода для поддержки более старых браузеров.
            Управление переменными окружения и режимами сборки
                Хотя для управления переменными окружения можно использовать отдельные файлы
                (например, .env, .env.production), vue.config.js также может быть использован для более тонкой
                настройки поведения приложения в различных средах.

    yarn.lock
        Когда вы добавляете или обновляете зависимости в проекте с помощью Yarn, yarn.lock автоматически генерируется
        или обновляется. Этот файл точно фиксирует версии всех зависимостей (и их транзитивных зависимостей),
        используемых в проекте на момент их установки.